.TH "hackbench" "8" "February  23, 2010" "" ""
.SH "NAME"
hackbench \- scheduler benchmark/stress test
.SH "SYNOPSIS"
.B hackbench
.RI "[\-p|\-\-pipe] [\-s|\-\-datasize " <bytes> "] " 
.RI "[\-l|\-\-loops " <num\-loops> "] "
.RI "[\-g|\-\-groups "<num\-groups> "] "
.RI "[\-f|\-\-fds <num\-fds>] "
.RI "[\-T|\-\-threads] [\-P|\-\-process] [\-\-help]"

.SH "DESCRIPTION"
Hackbench is both a benchmark and a stress test for the Linux kernel
scheduler. It's main job is to create a specified number of pairs of
schedulable entities (either threads or traditional processes) which
communicate via either sockets or pipes and time how long it takes for
each pair to send data back and forth.

.SH "OPTIONS"
These programs follow the usual GNU command line syntax, with long
options starting with two dashes ("\-\-").
.br 
A summary of options is included below.
.TP 
.B \-p, \-\-pipe
Sends the data via a pipe instead of the socket (default)
.TP 
.B \-s, \-\-datasize=<size in bytes>
Sets the amount of data to send in each message
.TP 
.B \-l, \-\-loops=<number of loops>
How many messages each sender/receiver pair should send
.TP 
.B \-g, \-\-groups=<number of groups>
Defines how many groups of senders and receivers should be started
.TP 
.B \-f, \-\-fds=<number of file descriptors>
Defines how many file descriptors each group of senders and receivers should use
.TP 
.B \-T, \-\-threads
Each sender/receiver child will be a POSIX thread of the parent.
.TP 
.B \-P, \-\-process
Hackbench will use fork() on all children (default behaviour)
.TP 
.B \-\-help
.br 
Shows a simple help screen
.\".TP 

.\" 
.SH "AUTHORS"
hackbench was written by Rusty Russell <rusty@rustcorp.com.au>, with contributions
from Craig Thomas, Ingo Molnar <mingo@elte.hu> and David Sommerseth <davids@redhat.com>

This manual page was written by Clark Williams <williams@redhat.com> 
and David Sommerseth <davids@redhat.com>
